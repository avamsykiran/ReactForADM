https://github.com/avamsykiran/ReactForADM.git

Environental Setup
------------------------------
        NODE JS
        Visual Studio Code

NODE
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

        Node  is a javascript execution environment (javascript runtime).

        NPM   Node Package Maanger  

                is a kind of a build tool
                + tracking you dependencies
                + can install the dependencies into your node project.
                + manage your project as well
                                creating
                                test
                                start
                                build


        up on node
                        create a javascrrpt based server side application

                                express js

                        single page applications (SPA)
                                
                                Angular
                                React JS
                                Vue JS

        creating a node project using npm
        ------------------------------------------

                npm init
                npm init -y


        install a node package
        -------------------------------------------

                global installation

                        npm install -g package-name                        

                project wise installation

                        npm install package-name --save
                        
                        npm install package-name --save-dev


        ReactJS
        ------------------------------------------------------------

                is a javacript SPA library.

                npm install -g create-react-app
                create-react-app react-project-name

                (or)

                npx create-react-app react-proj-name


        Component:
                        SPA has only one page = a collection of
                        interchagnable smart units that are
                        called components.

                        HTML -  DOM     Document Object Model
                        ----------------------------------------

                        <html>
                                <head>
                                        <title></title>
                                </head>
                                <body>
                                      <MainComponent >  
                                        <Header />
                                        <CustomrApplicationForm />
                                        <Footer />
                                      </MainComponent>
                                </body>
                        </html>

                        shadow dom
                        -------------------
                        [html]
                          |
                          |-head        
                          |   |-title
                          |
                          |-body
                             |-MainComponent
                                |-Header
                                |-CustomrApplicationForm
                                |-Footer

                        actual DOM
                        -------------

                        [html]
                          |
                          |-head        
                          |   |-title
                          |
                          |-body
                             |-<section id="">
                                |-<header></header>
                                |-<form></form>
                                |-<footer></footer>
                               </section>
                           
                
        ReactJS components
        -----------------------------------------------

        Component = renderer + state + props + behaveoural_code

                renderer  = whtat ahs to appear on behalf of this Component

                state = is the data assosiated with the Component

                props =  are attributes used on the Component,
                        mostly used by a parent Component to share data with
                        a child Component

                behaveoural_code = all the event handling, life cycle method ..etc all code

        types of react js components
        ---------------------------------------
                Class Components

                        class MainComponent extends React.Component {
                                
                                constructor(props){
                                  //state instialization
                                }

                                render(){
                                  return (
                                        <section>
                                          <Header>  </header>
                                          <CustomrApplicationForm></CustomrApplicationForm>
                                          <Footer>  </Footer> 
                                        </section>
                                  );
                                }

                                //event handlign code
                                //life cycle code
                                ........
                        }

                Functional Components

                        /* a javascript function itself behaves like a component.
                         * args is props
                         * returns a JSX element.
                        */

                        function Header(props){
                                return (
                                        <header>
                                                <h1>....</h1>
                                                <Banner />
                                                <NavBar />
                                        </header>
                                );
                        }

                        var Footer = (props) => (
                                <footer>
                                        <p>All rights reserved</p>
                                </footer>
                        );


                Pure Components

                        are thsoe components 
                                that do not handle or trigger 
                                chagne 'of state of other components'

                High Order Components (hoc)

                        is a function that accepts
                        + a component as input
                        + adds a few more features to it
                        + and returns it.


        JSX  - Java Script eXtension (HTML elements + React Components + javascript code)
        ------------------------------

                1. all html elements should be scripted in complete lower case
                
                <header>
                </header>

                2. all react components should be scripted in init-caps

                <Header>
                </Header>

                3. 'class' html attribute is not allowed.
                        'className' is the alternate for that attribute.


        React State is immutable
        --------------------------------


                state can not be editited directly.

                but always the old state must be replaced with a new state.


                class StudentForm extends React.Component{
                        constructor(props){
                                //state initialization
                                this.state.student = {studentId:0,fullName:''};
                        }
                        render(){
                                return (
                                        <form onSubmit="this.handleSubmit()">
                                                ......
                                                <button type="submit"></button>
                                        </form>
                                );
                        }

                        handleSubmit = (event) =>{
                         //modify the values of student
                         //this.state.student.fullName = someValeu; //this is not possible
                         let newStudent = Object.assigns(this.state.student);
                         newStudent.fullName = someValue;
                         this.setState({student:newStudent});//replacing oldState with new
                        }
                }
                
                1. support change detection faster.


Bootstrap With React
----------------------------------

1. Using CDN

        in index.html 
                in the <head></head>
                include the links and scripts related to 
                        Bootstrap
                        JQuery
                        Popper.js

2. use 'npm install' to install bootstrap,jquery and popper.js 
        as dependencies                         

        and import the required libs into index.js

3. use prebuild react specific bootstrap libraries like
        
        react-bootstrap
        
        reactstrap


React Component LifeCycle
--------------------------------------------------------

        While Component Creation and Insertion Into DOM (Mounting)

                constructor()
                render()
                componentDidMount()

        While Component Updates (re-renders) due to a change in props/state

                shouldComponentUpdate()
                render()
                componentDidUpdate()

        While Component unmounts ..

                componentWillUnmount()

        While Error at the time of rendering...

                componentDidCatch()

        Component Instance Methods

                setState()
                forceUpdate()
                
React Hooks
--------------------------------------------------------

        Hooks are functions that let you “hook into” React state and lifecycle 
        features from function components.

        1. Only call Hooks at the top level. 
        2. Only call Hooks in functional components.


        State Hook                     const [count, setCount] = useState(0);
          
          equi to setState()

        Effect Hook                     useEffect(() => {
                                           //task that shall happen
                                        }); 

          equi to componentDidMount, 
          componentDidUpdate 
          and  componentWillUnmount


Integrate with REST api
---------------------------------

        json-server             

                is a rest api generating tool 
                given a json file, but only
                for practise or test purpose.


        axios

                is a http client library.
                using this we can make any http
                request .

                get(url) :Promise
                post(url,reqeustBody) :Promise
                put(url,reqeustBody) :Promise
                delete(url) :Promise
                patch(url,reqeustBody) :Promise

                let p = axios.get('http://localhost:8989/todos');

                p.then(
                  (data) => {...}, //called on sucessful execution
                  (error) => {....}  //called on errorsome execution
                );

Routing
--------------------------------------------------------

        react-router

                        <Redirect to="" />

                        navigating programatically

        react-router-dom

                        BrowserRouter as Router
                        Route
                        Switch
                        Link


                        <Router>
                                <CommponnetThatCommonlyAppera />

                                <Switch>
                                        <Route path="/" exact><Component1 /></Route>
                                        <Route path="/about" component={component2} />
                                        <Route path="/edit/:id" component={component2} />
                                </Switch>                                
                        </Router>

                        <Link to="about">Link Text</Link>

                        props.match.params.id  gives access to the Route PArams.

Redux
---------------------------------------------------------

                is a centralized immutable state management
                library.

                STORE

                        is the centralized repository of data.
                        All application state is held by a store.

                        typically, but neccassacrily, we will have
                        one store fro one application.

                REDUCER

                        is a pure function, that processes the data
                        each time a action is dispatched.

                        will receive the older state as input and an action
                        makes changes in line with the given action to the given state
                        and returns the new state.

                ACTION

                        an action typically represents an operation.

                        an action has two main parts
                                type            is the naem of the operation
                                payload         data required to perform the operation

                        let action = {
                                        type:"DELETE",
                                        itemId:5
                                     };

                        let action = {
                                        type:"ADD",
                                        item:{id:5,title:'Pens Box',price:66}
                                     };         

                DISPATCHER                                                                 

                        is the one who carries an action
                        from a react component to a reducer.


        redux
                   
                        let myStore = createStore(reducer);        

        react-redux

                        <Provider store={myStore}>
                                .......
                        </Provider>

                        let myHOC = connect();  //creates a high order component

                        //export default TaskList;
                        export default myHOC(TaskList); 
                                //HOC will add the state as props to TaskList
                                //so that the task list can access the data in the state as props.
                                //also provides a dispatch function in the props
                                //to request an action from the component.


                        connct function accepts an optional 
                        funcation "mapStateToProps" as an argument


                        let hoc = connect((state)=>{students:[...state.students]});

                        export default hoc(StudentsList);

        Redux-Thunk
        -------------------------------------------------------------

                thunk: is a function that can return another function.

                let x=1+2; //1+2 happend immediatly

                let x = ()=> 1+2;//1+2 happens only if x() is called. 
                                        thus delayed until required.


            component ---dispatches an action ----> reducer


            Redux-Thunk is a middle ware that acts between a component and a reducer.
            And the reduxThunk action creators will perform the async operations...


            component ---dispatch  Redux-Thunk operation(async)         
                                        1. operation started            
                                                ---dispatch wait action ---------> reducer
                                        2. operation successfully completed
                                                ---dispatch completed with data ---> reducer
                                        3. operation aborted with err
                                                ---dispatch error ------> reducer




